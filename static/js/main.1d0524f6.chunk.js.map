{"version":3,"sources":["InterfaceGenerator.js","App.js","serviceWorker.js","index.js"],"names":["count","counter","initialState","id","name","type","reducer","state","action","filter","property","payload","newState","map","value","length","hbs","result","split","replace","slice","s","arg","startsWith","substring","processType","parseComponent","Error","types","useReducer","dispatch","useState","importValue","setImport","onChange","event","target","onClick","key","typeIndex","App","className","InterfaceGenerator","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d0524f6.chunk.js","sourcesContent":["import React, { useReducer, useState } from 'react';\n\nlet count = 0;\nconst counter = () => {\n  count = count + 1;\n  return count;\n}\n\nconst initialState = [{id: counter(), name: '', type: 'string'}];\n\nexport const parseComponent = (hbs) => {\n  // remove the tail\n  let result = hbs.split('/>')[0].split('>')[0];\n\n  // simplify the values\n  result = result.replace(/{{.*}}/gm, '____');\n\n  // remove the start\n  result = result.split(/[ \\n]+/).slice(1).filter(s => s);\n\n  // remove\n  result = result.map(arg => {\n    if (!arg.startsWith('@')) {\n      return null;\n    }\n\n    return arg.substring(1);\n  }).filter(s => s);\n\n  const processType = (arg) => {\n    const name = arg.split('=')[0];\n    const value = arg.split('=')[1];\n\n    if (name.startsWith('on')) {\n      return 'function';\n    }\n\n    if (value.startsWith('\"')) {\n      return 'string';\n    }\n\n    return 'string';\n  };\n\n  result = result.map((arg, id) => {\n    return {\n      id,\n      name: arg.split('=')[0],\n      type: processType(arg),\n    }\n  })\n\n  return result\n}\n\nconst reducer = (state, action) => {\n\n  switch (action.type) {\n    case 'add':\n      return [...state, {id: counter(), name: '', type: 'string'}];\n    case 'remove':\n      return state.filter(property => property.id !== action.payload.property.id)\n    case 'updateName':\n      const newState = state.map(property => {\n        if (property.id === action.payload.property.id) {\n          return { ...property, name: action.payload.value }\n        }\n        return property;\n      });\n      if (newState[newState.length - 1].name) {\n        return [...newState, {id: counter(), name: '', type: 'string'}]\n      }\n      return newState;\n    case 'updateType':\n      return state.map(property => {\n        if (property.id === action.payload.property.id) {\n          return { ...property, type: action.payload.value }\n        }\n        return property;\n      });\n    case 'import':\n      return parseComponent(action.payload);\n    default:\n      throw new Error('Not existing state');\n  }\n}\n\nconst types = ['number', 'string', 'boolean', 'enum', 'void', 'null', 'undefined', 'any', 'never', 'Array', 'function']\n\n// Handle state\nexport default () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [importValue, setImport] = useState('');\n\n  return (\n    <div>\n      <h2>Import</h2>\n      <textarea\n        value={importValue}\n        onChange={(event) => {\n            const value = event.target.value;\n            setImport(value);\n            dispatch({type: 'import', payload: value});\n        }}\n      ></textarea>\n      <h2>Define</h2>\n      <button onClick={() => dispatch({type: 'add'})} type=\"button\">Add</button>\n      <ul>\n        {state.map((property) => (\n          <li key={property.id}>\n            <label>\n              Name\n              <input name=\"property-name\" type=\"text\" value={property.name} onChange={event => dispatch({type: 'updateName', payload: { property, value: event.target.value}})}/>\n              <select name=\"type\" value={property.type} onChange={event => dispatch({ type: 'updateType', payload: { property, value: event.target.value }})}>\n              {types.map((type, typeIndex) => (\n                <option key={typeIndex} value={type}>{type}</option>\n              ))}\n              </select>\n            </label>\n            <button onClick={() => dispatch({type: 'remove', payload: { property }})} type=\"button\">x</button>\n          </li>\n        ))}\n      </ul>\n\n      <h2>Output</h2>\n      <code>\n        interface Args {\"{\"}\n            {state.filter(property => property.name).map(property => <p key={property.id}>{property.name}: {property.type};</p>)}\n        {\"}\"}\n      </code>\n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\nimport BasicState from './BasicState';\nimport InterfaceGenerator from './InterfaceGenerator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <InterfaceGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}